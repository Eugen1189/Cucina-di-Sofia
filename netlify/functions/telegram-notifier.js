const axios = require('axios');

exports.handler = async function(event) {
    console.log("--- –§—É–Ω–∫—Ü—ñ—è telegram-notifier –∑–∞–ø—É—â–µ–Ω–∞ ---");

    try {
        const formData = JSON.parse(event.body).payload.data;
        const { name, phone, product } = formData;
        
        console.log("–û—Ç—Ä–∏–º–∞–Ω—ñ –¥–∞–Ω—ñ –∑ —Ñ–æ—Ä–º–∏:", formData);

        const botToken = process.env.TELEGRAM_BOT_TOKEN;
        const chatId = process.env.TELEGRAM_CHAT_ID;

        // ‚ú® –î—ñ–∞–≥–Ω–æ—Å—Ç–∏—á–Ω—ñ –ª–æ–≥–∏ ‚ú®
        console.log("–ß–∏ —ñ—Å–Ω—É—î Bot Token:", !!botToken); // –í–∏–≤–µ–¥–µ true –∞–±–æ false
        console.log("–ß–∏ —ñ—Å–Ω—É—î Chat ID:", !!chatId);   // –í–∏–≤–µ–¥–µ true –∞–±–æ false

        if (!botToken || !chatId) {
            console.error("!!! –ü–æ–º–∏–ª–∫–∞: Bot Token –∞–±–æ Chat ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö Netlify!");
            return {
                statusCode: 500,
                body: JSON.stringify({ message: "–ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó —Å–µ—Ä–≤–µ—Ä–∞." }),
            };
        }

        const message = `üîî –ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!\n\nüçΩÔ∏è –°—Ç—Ä–∞–≤–∞: ${product}\nüë§ –Ü–º'—è: ${name}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}`;
        const telegramUrl = `https://api.telegram.org/bot${botToken}/sendMessage`;
        
        console.log("–ù–∞–º–∞–≥–∞—é—Å—å –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram...");

        const telegramResponse = await axios.post(telegramUrl, {
            chat_id: chatId,
            text: message,
        });

        // ‚ú® –õ–æ–≥ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ Telegram ‚ú®
        console.log("–í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ Telegram API:", telegramResponse.data);
        
        return {
            statusCode: 200,
            body: JSON.stringify({ message: "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ" }),
        };

    } catch (error) {
        console.error("!!! –°–¢–ê–õ–ê–°–Ø –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê:", error.response ? error.response.data : error.message);
        return {
            statusCode: 500,
            body: JSON.stringify({ message: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ." }),
        };
    }
};